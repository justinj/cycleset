// Generated by psc version 0.5.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function showNumberImpl(n) {  return n.toString();};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $plus$plus = function (__dict_Semigroup_1) {
        return $less$greater(__dict_Semigroup_1);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var showNumber = function () {
        return new Show(showNumberImpl);
    };
    var show = function (dict) {
        return dict.show;
    };
    var semigroupString = function () {
        return new Semigroup(concatString);
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_4) {
        return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = function () {
        return new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    };
    var liftA1 = function (__dict_Applicative_6) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
            };
        };
    };
    var ap = function (__dict_Monad_14) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_14)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Semigroup: Semigroup, 
        Num: Num, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        show: show, 
        "$": $dollar, 
        showNumber: showNumber, 
        numNumber: numNumber, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var applicativeEff = function () {
        return new Prelude.Applicative(applyEff, returnE);
    };
    var applyEff = function () {
        return new Prelude.Apply(Prelude.ap(monadEff()), functorEff);
    };
    var monadEff = function () {
        return new Prelude.Monad(applicativeEff, bindEff);
    };
    var bindEff = function () {
        return new Prelude.Bind(bindE, applyEff);
    };
    var functorEff = function () {
        return new Prelude.Functor(Prelude.liftA1(applicativeEff()));
    };
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_15) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_15)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.React = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function noop0() { return null; };
    var noop1 = noop0;
    var noop2 = noop0;
     function getProps() {        return __current.props;  };
     function writeState(state) {                      __current.replaceState({state: state});         return function() { return state; }           };
     function readState() {             return __current.state.state;  };
     function getSelf() {    return __current;   };
     function runUI(ref) {            return function(action) {        return function() {              if (ref.isMounted()) {           __current = ref;               try {                            return action();             } finally {                      __current = null;            }                            }                            }                            }                            };
     var __current;                                     function mkUI(ss) {                                  return function(render) {                            var specs = {};                                    for (var s in ss) {                                  if (ss.hasOwnProperty(s)) {                          specs[s] = (function(impl) {                         return function() {                                  __current = this;                                  try {                                                return impl.apply(this, arguments);              } finally {                                          __current = null;                                }                                                }                                                })(ss[s]);                                       }                                                }                                                  specs.getInitialState= function() {                  __current = this;                                  try {                                                return {state: ss.getInitialState()};            } finally {                                          __current = null;                                }                                                };                                                 specs.render = function() {                          __current = this;                                  try {                                                var ui = render.call(this);                      } finally {                                          __current = null;                                }                                                  return ui;                                       };                                                 return React.createClass(specs);                 }                                                };
     function handle(f) {                       var component = __current;               return function(e) {                       __current = component;                   try {                                      var res = f.call(__current, e)();      } finally {                                __current = null;                      }                                        return res;                            }                                      };
     function renderToBody(component) {                             return function() {                                            return React.renderComponent(component, document.body);    }                                                          };
    var spec = (function () {
        var updateAlways = function (props) {
            return function (state) {
                return Prelude["return"](Control_Monad_Eff.monadEff())(true);
            };
        };
        return {
            getInitialState: noop0, 
            componentWillMount: noop0, 
            componentDidMount: noop0, 
            componentWillReceiveProps: noop1, 
            shouldComponentUpdate: updateAlways, 
            componentWillUpdate: noop2, 
            componentDidUpdate: noop2, 
            componentWillUnmount: noop0
        };
    })();
    return {
        renderToBody: renderToBody, 
        handle: handle, 
        mkUI: mkUI, 
        runUI: runUI, 
        getSelf: getSelf, 
        readState: readState, 
        writeState: writeState, 
        getProps: getProps, 
        spec: spec, 
        noop2: noop2, 
        noop1: noop1, 
        noop0: noop0
    };
})();
var PS = PS || {};
PS.React_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var React = PS.React;
    function Accept(value0) {
        this.value0 = value0;
    };
    Accept.create = function (value0) {
        return new Accept(value0);
    };
    function AccessKey(value0) {
        this.value0 = value0;
    };
    AccessKey.create = function (value0) {
        return new AccessKey(value0);
    };
    function Action(value0) {
        this.value0 = value0;
    };
    Action.create = function (value0) {
        return new Action(value0);
    };
    function AllowFullScreen(value0) {
        this.value0 = value0;
    };
    AllowFullScreen.create = function (value0) {
        return new AllowFullScreen(value0);
    };
    function AllowTransparency(value0) {
        this.value0 = value0;
    };
    AllowTransparency.create = function (value0) {
        return new AllowTransparency(value0);
    };
    function Alt(value0) {
        this.value0 = value0;
    };
    Alt.create = function (value0) {
        return new Alt(value0);
    };
    function Aria(value0) {
        this.value0 = value0;
    };
    Aria.create = function (value0) {
        return new Aria(value0);
    };
    function Async(value0) {
        this.value0 = value0;
    };
    Async.create = function (value0) {
        return new Async(value0);
    };
    function AutoComplete(value0) {
        this.value0 = value0;
    };
    AutoComplete.create = function (value0) {
        return new AutoComplete(value0);
    };
    function AutoFocus(value0) {
        this.value0 = value0;
    };
    AutoFocus.create = function (value0) {
        return new AutoFocus(value0);
    };
    function AutoPlay(value0) {
        this.value0 = value0;
    };
    AutoPlay.create = function (value0) {
        return new AutoPlay(value0);
    };
    function CellPadding(value0) {
        this.value0 = value0;
    };
    CellPadding.create = function (value0) {
        return new CellPadding(value0);
    };
    function CellSpacing(value0) {
        this.value0 = value0;
    };
    CellSpacing.create = function (value0) {
        return new CellSpacing(value0);
    };
    function CharSet(value0) {
        this.value0 = value0;
    };
    CharSet.create = function (value0) {
        return new CharSet(value0);
    };
    function Checked(value0) {
        this.value0 = value0;
    };
    Checked.create = function (value0) {
        return new Checked(value0);
    };
    function ClassName(value0) {
        this.value0 = value0;
    };
    ClassName.create = function (value0) {
        return new ClassName(value0);
    };
    function Cols(value0) {
        this.value0 = value0;
    };
    Cols.create = function (value0) {
        return new Cols(value0);
    };
    function ColSpan(value0) {
        this.value0 = value0;
    };
    ColSpan.create = function (value0) {
        return new ColSpan(value0);
    };
    function Content(value0) {
        this.value0 = value0;
    };
    Content.create = function (value0) {
        return new Content(value0);
    };
    function ContentEditable(value0) {
        this.value0 = value0;
    };
    ContentEditable.create = function (value0) {
        return new ContentEditable(value0);
    };
    function ContextMenu(value0) {
        this.value0 = value0;
    };
    ContextMenu.create = function (value0) {
        return new ContextMenu(value0);
    };
    function Controls(value0) {
        this.value0 = value0;
    };
    Controls.create = function (value0) {
        return new Controls(value0);
    };
    function CrossOrigin(value0) {
        this.value0 = value0;
    };
    CrossOrigin.create = function (value0) {
        return new CrossOrigin(value0);
    };
    function Data(value0) {
        this.value0 = value0;
    };
    Data.create = function (value0) {
        return new Data(value0);
    };
    function DateTime(value0) {
        this.value0 = value0;
    };
    DateTime.create = function (value0) {
        return new DateTime(value0);
    };
    function Defer(value0) {
        this.value0 = value0;
    };
    Defer.create = function (value0) {
        return new Defer(value0);
    };
    function Dir(value0) {
        this.value0 = value0;
    };
    Dir.create = function (value0) {
        return new Dir(value0);
    };
    function Disabled(value0) {
        this.value0 = value0;
    };
    Disabled.create = function (value0) {
        return new Disabled(value0);
    };
    function Download(value0) {
        this.value0 = value0;
    };
    Download.create = function (value0) {
        return new Download(value0);
    };
    function Draggable(value0) {
        this.value0 = value0;
    };
    Draggable.create = function (value0) {
        return new Draggable(value0);
    };
    function EncType(value0) {
        this.value0 = value0;
    };
    EncType.create = function (value0) {
        return new EncType(value0);
    };
    function Form(value0) {
        this.value0 = value0;
    };
    Form.create = function (value0) {
        return new Form(value0);
    };
    function FormNoValidate(value0) {
        this.value0 = value0;
    };
    FormNoValidate.create = function (value0) {
        return new FormNoValidate(value0);
    };
    function FrameBorder(value0) {
        this.value0 = value0;
    };
    FrameBorder.create = function (value0) {
        return new FrameBorder(value0);
    };
    function Height(value0) {
        this.value0 = value0;
    };
    Height.create = function (value0) {
        return new Height(value0);
    };
    function Hidden(value0) {
        this.value0 = value0;
    };
    Hidden.create = function (value0) {
        return new Hidden(value0);
    };
    function Href(value0) {
        this.value0 = value0;
    };
    Href.create = function (value0) {
        return new Href(value0);
    };
    function HrefLang(value0) {
        this.value0 = value0;
    };
    HrefLang.create = function (value0) {
        return new HrefLang(value0);
    };
    function HtmlFor(value0) {
        this.value0 = value0;
    };
    HtmlFor.create = function (value0) {
        return new HtmlFor(value0);
    };
    function HttpEquiv(value0) {
        this.value0 = value0;
    };
    HttpEquiv.create = function (value0) {
        return new HttpEquiv(value0);
    };
    function Icon(value0) {
        this.value0 = value0;
    };
    Icon.create = function (value0) {
        return new Icon(value0);
    };
    function Id(value0) {
        this.value0 = value0;
    };
    Id.create = function (value0) {
        return new Id(value0);
    };
    function Label(value0) {
        this.value0 = value0;
    };
    Label.create = function (value0) {
        return new Label(value0);
    };
    function Lang(value0) {
        this.value0 = value0;
    };
    Lang.create = function (value0) {
        return new Lang(value0);
    };
    function List(value0) {
        this.value0 = value0;
    };
    List.create = function (value0) {
        return new List(value0);
    };
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    function Max(value0) {
        this.value0 = value0;
    };
    Max.create = function (value0) {
        return new Max(value0);
    };
    function MaxLength(value0) {
        this.value0 = value0;
    };
    MaxLength.create = function (value0) {
        return new MaxLength(value0);
    };
    function MediaGroup(value0) {
        this.value0 = value0;
    };
    MediaGroup.create = function (value0) {
        return new MediaGroup(value0);
    };
    function Method(value0) {
        this.value0 = value0;
    };
    Method.create = function (value0) {
        return new Method(value0);
    };
    function Min(value0) {
        this.value0 = value0;
    };
    Min.create = function (value0) {
        return new Min(value0);
    };
    function Multiple(value0) {
        this.value0 = value0;
    };
    Multiple.create = function (value0) {
        return new Multiple(value0);
    };
    function Muted(value0) {
        this.value0 = value0;
    };
    Muted.create = function (value0) {
        return new Muted(value0);
    };
    function Name(value0) {
        this.value0 = value0;
    };
    Name.create = function (value0) {
        return new Name(value0);
    };
    function NoValidate(value0) {
        this.value0 = value0;
    };
    NoValidate.create = function (value0) {
        return new NoValidate(value0);
    };
    function Pattern(value0) {
        this.value0 = value0;
    };
    Pattern.create = function (value0) {
        return new Pattern(value0);
    };
    function Placeholder(value0) {
        this.value0 = value0;
    };
    Placeholder.create = function (value0) {
        return new Placeholder(value0);
    };
    function Poster(value0) {
        this.value0 = value0;
    };
    Poster.create = function (value0) {
        return new Poster(value0);
    };
    function Preload(value0) {
        this.value0 = value0;
    };
    Preload.create = function (value0) {
        return new Preload(value0);
    };
    function RadioGroup(value0) {
        this.value0 = value0;
    };
    RadioGroup.create = function (value0) {
        return new RadioGroup(value0);
    };
    function ReadOnly(value0) {
        this.value0 = value0;
    };
    ReadOnly.create = function (value0) {
        return new ReadOnly(value0);
    };
    function Rel(value0) {
        this.value0 = value0;
    };
    Rel.create = function (value0) {
        return new Rel(value0);
    };
    function Required(value0) {
        this.value0 = value0;
    };
    Required.create = function (value0) {
        return new Required(value0);
    };
    function Role(value0) {
        this.value0 = value0;
    };
    Role.create = function (value0) {
        return new Role(value0);
    };
    function Rows(value0) {
        this.value0 = value0;
    };
    Rows.create = function (value0) {
        return new Rows(value0);
    };
    function RowSpan(value0) {
        this.value0 = value0;
    };
    RowSpan.create = function (value0) {
        return new RowSpan(value0);
    };
    function Sandbox(value0) {
        this.value0 = value0;
    };
    Sandbox.create = function (value0) {
        return new Sandbox(value0);
    };
    function Scope(value0) {
        this.value0 = value0;
    };
    Scope.create = function (value0) {
        return new Scope(value0);
    };
    function ScrollLeft(value0) {
        this.value0 = value0;
    };
    ScrollLeft.create = function (value0) {
        return new ScrollLeft(value0);
    };
    function Scrolling(value0) {
        this.value0 = value0;
    };
    Scrolling.create = function (value0) {
        return new Scrolling(value0);
    };
    function ScrollTop(value0) {
        this.value0 = value0;
    };
    ScrollTop.create = function (value0) {
        return new ScrollTop(value0);
    };
    function Seamless(value0) {
        this.value0 = value0;
    };
    Seamless.create = function (value0) {
        return new Seamless(value0);
    };
    function Selected(value0) {
        this.value0 = value0;
    };
    Selected.create = function (value0) {
        return new Selected(value0);
    };
    function Size(value0) {
        this.value0 = value0;
    };
    Size.create = function (value0) {
        return new Size(value0);
    };
    function Span(value0) {
        this.value0 = value0;
    };
    Span.create = function (value0) {
        return new Span(value0);
    };
    function SpellCheck(value0) {
        this.value0 = value0;
    };
    SpellCheck.create = function (value0) {
        return new SpellCheck(value0);
    };
    function Src(value0) {
        this.value0 = value0;
    };
    Src.create = function (value0) {
        return new Src(value0);
    };
    function SrcDoc(value0) {
        this.value0 = value0;
    };
    SrcDoc.create = function (value0) {
        return new SrcDoc(value0);
    };
    function SrcSet(value0) {
        this.value0 = value0;
    };
    SrcSet.create = function (value0) {
        return new SrcSet(value0);
    };
    function Start(value0) {
        this.value0 = value0;
    };
    Start.create = function (value0) {
        return new Start(value0);
    };
    function Step(value0) {
        this.value0 = value0;
    };
    Step.create = function (value0) {
        return new Step(value0);
    };
    function Style(value0) {
        this.value0 = value0;
    };
    Style.create = function (value0) {
        return new Style(value0);
    };
    function TabIndex(value0) {
        this.value0 = value0;
    };
    TabIndex.create = function (value0) {
        return new TabIndex(value0);
    };
    function Target(value0) {
        this.value0 = value0;
    };
    Target.create = function (value0) {
        return new Target(value0);
    };
    function Title(value0) {
        this.value0 = value0;
    };
    Title.create = function (value0) {
        return new Title(value0);
    };
    function Type(value0) {
        this.value0 = value0;
    };
    Type.create = function (value0) {
        return new Type(value0);
    };
    function Value(value0) {
        this.value0 = value0;
    };
    Value.create = function (value0) {
        return new Value(value0);
    };
    function Width(value0) {
        this.value0 = value0;
    };
    Width.create = function (value0) {
        return new Width(value0);
    };
    function Wmode(value0) {
        this.value0 = value0;
    };
    Wmode.create = function (value0) {
        return new Wmode(value0);
    };
    function AutoCapitalize(value0) {
        this.value0 = value0;
    };
    AutoCapitalize.create = function (value0) {
        return new AutoCapitalize(value0);
    };
    function AutoCorrect(value0) {
        this.value0 = value0;
    };
    AutoCorrect.create = function (value0) {
        return new AutoCorrect(value0);
    };
    function Property(value0) {
        this.value0 = value0;
    };
    Property.create = function (value0) {
        return new Property(value0);
    };
    function Ref(value0) {
        this.value0 = value0;
    };
    Ref.create = function (value0) {
        return new Ref(value0);
    };
    function Key(value0) {
        this.value0 = value0;
    };
    Key.create = function (value0) {
        return new Key(value0);
    };
    function DangerouslySetInnerHTML(value0) {
        this.value0 = value0;
    };
    DangerouslySetInnerHTML.create = function (value0) {
        return new DangerouslySetInnerHTML(value0);
    };
    function OnBlur(value0) {
        this.value0 = value0;
    };
    OnBlur.create = function (value0) {
        return new OnBlur(value0);
    };
    function OnChange(value0) {
        this.value0 = value0;
    };
    OnChange.create = function (value0) {
        return new OnChange(value0);
    };
    function OnContextMenu(value0) {
        this.value0 = value0;
    };
    OnContextMenu.create = function (value0) {
        return new OnContextMenu(value0);
    };
    function OnCopy(value0) {
        this.value0 = value0;
    };
    OnCopy.create = function (value0) {
        return new OnCopy(value0);
    };
    function OnCut(value0) {
        this.value0 = value0;
    };
    OnCut.create = function (value0) {
        return new OnCut(value0);
    };
    function OnClick(value0) {
        this.value0 = value0;
    };
    OnClick.create = function (value0) {
        return new OnClick(value0);
    };
    function OnDoubleClick(value0) {
        this.value0 = value0;
    };
    OnDoubleClick.create = function (value0) {
        return new OnDoubleClick(value0);
    };
    function OnDrag(value0) {
        this.value0 = value0;
    };
    OnDrag.create = function (value0) {
        return new OnDrag(value0);
    };
    function OnDragEnd(value0) {
        this.value0 = value0;
    };
    OnDragEnd.create = function (value0) {
        return new OnDragEnd(value0);
    };
    function OnDragEnter(value0) {
        this.value0 = value0;
    };
    OnDragEnter.create = function (value0) {
        return new OnDragEnter(value0);
    };
    function OnDragExit(value0) {
        this.value0 = value0;
    };
    OnDragExit.create = function (value0) {
        return new OnDragExit(value0);
    };
    function OnDragLeave(value0) {
        this.value0 = value0;
    };
    OnDragLeave.create = function (value0) {
        return new OnDragLeave(value0);
    };
    function OnDragOver(value0) {
        this.value0 = value0;
    };
    OnDragOver.create = function (value0) {
        return new OnDragOver(value0);
    };
    function OnDragStart(value0) {
        this.value0 = value0;
    };
    OnDragStart.create = function (value0) {
        return new OnDragStart(value0);
    };
    function OnDrop(value0) {
        this.value0 = value0;
    };
    OnDrop.create = function (value0) {
        return new OnDrop(value0);
    };
    function OnError(value0) {
        this.value0 = value0;
    };
    OnError.create = function (value0) {
        return new OnError(value0);
    };
    function OnFocus(value0) {
        this.value0 = value0;
    };
    OnFocus.create = function (value0) {
        return new OnFocus(value0);
    };
    function OnInput(value0) {
        this.value0 = value0;
    };
    OnInput.create = function (value0) {
        return new OnInput(value0);
    };
    function OnKeyDown(value0) {
        this.value0 = value0;
    };
    OnKeyDown.create = function (value0) {
        return new OnKeyDown(value0);
    };
    function OnKeyPress(value0) {
        this.value0 = value0;
    };
    OnKeyPress.create = function (value0) {
        return new OnKeyPress(value0);
    };
    function OnKeyUp(value0) {
        this.value0 = value0;
    };
    OnKeyUp.create = function (value0) {
        return new OnKeyUp(value0);
    };
    function OnLoad(value0) {
        this.value0 = value0;
    };
    OnLoad.create = function (value0) {
        return new OnLoad(value0);
    };
    function OnMouseEnter(value0) {
        this.value0 = value0;
    };
    OnMouseEnter.create = function (value0) {
        return new OnMouseEnter(value0);
    };
    function OnMouseLeave(value0) {
        this.value0 = value0;
    };
    OnMouseLeave.create = function (value0) {
        return new OnMouseLeave(value0);
    };
    function OnMouseDown(value0) {
        this.value0 = value0;
    };
    OnMouseDown.create = function (value0) {
        return new OnMouseDown(value0);
    };
    function OnMouseMove(value0) {
        this.value0 = value0;
    };
    OnMouseMove.create = function (value0) {
        return new OnMouseMove(value0);
    };
    function OnMouseOut(value0) {
        this.value0 = value0;
    };
    OnMouseOut.create = function (value0) {
        return new OnMouseOut(value0);
    };
    function OnMouseOver(value0) {
        this.value0 = value0;
    };
    OnMouseOver.create = function (value0) {
        return new OnMouseOver(value0);
    };
    function OnMouseUp(value0) {
        this.value0 = value0;
    };
    OnMouseUp.create = function (value0) {
        return new OnMouseUp(value0);
    };
    function OnPaste(value0) {
        this.value0 = value0;
    };
    OnPaste.create = function (value0) {
        return new OnPaste(value0);
    };
    function OnReset(value0) {
        this.value0 = value0;
    };
    OnReset.create = function (value0) {
        return new OnReset(value0);
    };
    function OnScroll(value0) {
        this.value0 = value0;
    };
    OnScroll.create = function (value0) {
        return new OnScroll(value0);
    };
    function OnSubmit(value0) {
        this.value0 = value0;
    };
    OnSubmit.create = function (value0) {
        return new OnSubmit(value0);
    };
    function OnTouchCancel(value0) {
        this.value0 = value0;
    };
    OnTouchCancel.create = function (value0) {
        return new OnTouchCancel(value0);
    };
    function OnTouchEnd(value0) {
        this.value0 = value0;
    };
    OnTouchEnd.create = function (value0) {
        return new OnTouchEnd(value0);
    };
    function OnTouchMove(value0) {
        this.value0 = value0;
    };
    OnTouchMove.create = function (value0) {
        return new OnTouchMove(value0);
    };
    function OnTouchStart(value0) {
        this.value0 = value0;
    };
    OnTouchStart.create = function (value0) {
        return new OnTouchStart(value0);
    };
    function OnWheel(value0) {
        this.value0 = value0;
    };
    OnWheel.create = function (value0) {
        return new OnWheel(value0);
    };
     function mkProps(props) {                                   var result = {};                                          for (var i = 0, len = props.length; i < len; i++) {         var prop = props[i];                                      var name = prop.constructor.name;                         name = name[0].toLowerCase() + name.substring(1);         var val = prop.value0;                                    /* Until React.js handles data and aria like style*/      /* we have to unload the properties.*/                    if (name === 'data' || name === 'aria') {                   for (var subprop in val) {                                  if (val.hasOwnProperty(subprop)) {                          result[name + '-' + subprop] = val[subprop];            }                                                       }                                                       } else {                                                    result[name] = val;                                     }                                                       }                                                         return result;                                          }                                                         function mkDOM(tagName) {                                   var ctor = window.React.DOM[tagName];                     return function(props) {                                    return function(children) {                                 var p = props.length > 0 ? mkProps(props) : null;         return ctor.apply(ctor, [p].concat(children));          }                                                       }                                                       };
    function text(text) {   return text;        };
    var style = Style.create;
    var p = mkDOM("p");
    var onClick = function (f) {
        return OnClick.create(React.handle(f));
    };
    var h1 = mkDOM("h1");
    var div = mkDOM("div");
    var div$prime = div([  ]);
    var className = ClassName.create;
    return {
        Accept: Accept, 
        AccessKey: AccessKey, 
        Action: Action, 
        AllowFullScreen: AllowFullScreen, 
        AllowTransparency: AllowTransparency, 
        Alt: Alt, 
        Aria: Aria, 
        Async: Async, 
        AutoComplete: AutoComplete, 
        AutoFocus: AutoFocus, 
        AutoPlay: AutoPlay, 
        CellPadding: CellPadding, 
        CellSpacing: CellSpacing, 
        CharSet: CharSet, 
        Checked: Checked, 
        ClassName: ClassName, 
        Cols: Cols, 
        ColSpan: ColSpan, 
        Content: Content, 
        ContentEditable: ContentEditable, 
        ContextMenu: ContextMenu, 
        Controls: Controls, 
        CrossOrigin: CrossOrigin, 
        Data: Data, 
        DateTime: DateTime, 
        Defer: Defer, 
        Dir: Dir, 
        Disabled: Disabled, 
        Download: Download, 
        Draggable: Draggable, 
        EncType: EncType, 
        Form: Form, 
        FormNoValidate: FormNoValidate, 
        FrameBorder: FrameBorder, 
        Height: Height, 
        Hidden: Hidden, 
        Href: Href, 
        HrefLang: HrefLang, 
        HtmlFor: HtmlFor, 
        HttpEquiv: HttpEquiv, 
        Icon: Icon, 
        Id: Id, 
        Label: Label, 
        Lang: Lang, 
        List: List, 
        Loop: Loop, 
        Max: Max, 
        MaxLength: MaxLength, 
        MediaGroup: MediaGroup, 
        Method: Method, 
        Min: Min, 
        Multiple: Multiple, 
        Muted: Muted, 
        Name: Name, 
        NoValidate: NoValidate, 
        Pattern: Pattern, 
        Placeholder: Placeholder, 
        Poster: Poster, 
        Preload: Preload, 
        RadioGroup: RadioGroup, 
        ReadOnly: ReadOnly, 
        Rel: Rel, 
        Required: Required, 
        Role: Role, 
        Rows: Rows, 
        RowSpan: RowSpan, 
        Sandbox: Sandbox, 
        Scope: Scope, 
        ScrollLeft: ScrollLeft, 
        Scrolling: Scrolling, 
        ScrollTop: ScrollTop, 
        Seamless: Seamless, 
        Selected: Selected, 
        Size: Size, 
        Span: Span, 
        SpellCheck: SpellCheck, 
        Src: Src, 
        SrcDoc: SrcDoc, 
        SrcSet: SrcSet, 
        Start: Start, 
        Step: Step, 
        Style: Style, 
        TabIndex: TabIndex, 
        Target: Target, 
        Title: Title, 
        Type: Type, 
        Value: Value, 
        Width: Width, 
        Wmode: Wmode, 
        AutoCapitalize: AutoCapitalize, 
        AutoCorrect: AutoCorrect, 
        Property: Property, 
        Ref: Ref, 
        Key: Key, 
        DangerouslySetInnerHTML: DangerouslySetInnerHTML, 
        OnBlur: OnBlur, 
        OnChange: OnChange, 
        OnContextMenu: OnContextMenu, 
        OnCopy: OnCopy, 
        OnCut: OnCut, 
        OnClick: OnClick, 
        OnDoubleClick: OnDoubleClick, 
        OnDrag: OnDrag, 
        OnDragEnd: OnDragEnd, 
        OnDragEnter: OnDragEnter, 
        OnDragExit: OnDragExit, 
        OnDragLeave: OnDragLeave, 
        OnDragOver: OnDragOver, 
        OnDragStart: OnDragStart, 
        OnDrop: OnDrop, 
        OnError: OnError, 
        OnFocus: OnFocus, 
        OnInput: OnInput, 
        OnKeyDown: OnKeyDown, 
        OnKeyPress: OnKeyPress, 
        OnKeyUp: OnKeyUp, 
        OnLoad: OnLoad, 
        OnMouseEnter: OnMouseEnter, 
        OnMouseLeave: OnMouseLeave, 
        OnMouseDown: OnMouseDown, 
        OnMouseMove: OnMouseMove, 
        OnMouseOut: OnMouseOut, 
        OnMouseOver: OnMouseOver, 
        OnMouseUp: OnMouseUp, 
        OnPaste: OnPaste, 
        OnReset: OnReset, 
        OnScroll: OnScroll, 
        OnSubmit: OnSubmit, 
        OnTouchCancel: OnTouchCancel, 
        OnTouchEnd: OnTouchEnd, 
        OnTouchMove: OnTouchMove, 
        OnTouchStart: OnTouchStart, 
        OnWheel: OnWheel, 
        "div'": div$prime, 
        p: p, 
        h1: h1, 
        div: div, 
        text: text, 
        mkDOM: mkDOM, 
        onClick: onClick, 
        style: style, 
        className: className
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var React = PS.React;
    var Debug_Trace = PS.Debug_Trace;
    var React_DOM = PS.React_DOM;
    function interval(ms) {   return function(action) {     return function() { return setInterval(action, ms); }   } };
    var incrementCounter = function (e) {
        return function __do() {
            var _6 = React.readState();
            return React.writeState(_6 + 1)();
        };
    };
    var helloInConsole = function (e) {
        return function __do() {
            var _4 = React.getProps();
            return Debug_Trace.trace("Hello, " + (_4.name + "!"))();
        };
    };
    var hello = React.mkUI(React.spec)(function __do() {
        var _5 = React.getProps();
        return React_DOM.h1([ React_DOM.className("Hello"), React_DOM.onClick(helloInConsole), React_DOM.style({
            background: "gray"
        }) ])([ React_DOM.text("Hello, "), React_DOM.text(_5.name) ]);
    });
    var counter = React.mkUI((function () {
        var _43 = {};
        for (var _44 in React.spec) {
            if (React.spec.hasOwnProperty(_44)) {
                _43[_44] = React.spec[_44];
            };
        };
        _43.getInitialState = Prelude["return"](Control_Monad_Eff.monadEff())(0);
        _43.componentDidMount = function __do() {
            var _8 = React.getSelf();
            return interval(1000)(React.runUI(_8)(function __do() {
                var _7 = React.readState();
                return Debug_Trace.print(Prelude.showNumber())(_7)();
            }))();
        };
        return _43;
    })())(function __do() {
        var _9 = React.readState();
        return React_DOM.p([ React_DOM.className("Counter"), React_DOM.onClick(incrementCounter) ])([ React_DOM.text(Prelude.show(Prelude.showNumber())(_9)), React_DOM.text(" Click me to increment!") ]);
    });
    var main = (function () {
        var component = React_DOM["div'"]([ hello({
            name: "World"
        }), counter({}) ]);
        return React.renderToBody(component);
    })();
    return {
        main: main, 
        counter: counter, 
        incrementCounter: incrementCounter, 
        hello: hello, 
        helloInConsole: helloInConsole, 
        interval: interval
    };
})();
PS.Main.main();
